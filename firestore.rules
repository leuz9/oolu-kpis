rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.isAdmin == true;
    }
    
    function hasRole(role) {
      return request.auth.token.role == role;
    }
    
    // Support Tickets collection rules
    match /support_tickets/{ticketId} {
      allow read: if isSignedIn() && (
        // Allow users to read their own tickets
        resource.data.userId == request.auth.uid ||
        // Allow admins and support staff to read all tickets
        isAdmin() ||
        hasRole('support')
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        // Allow users to update their own tickets
        resource.data.userId == request.auth.uid ||
        // Allow admins and support staff to update any ticket
        isAdmin() ||
        hasRole('support')
      );
      allow delete: if isSignedIn() && (
        // Allow users to delete their own tickets
        resource.data.userId == request.auth.uid ||
        // Allow admins to delete any ticket
        isAdmin()
      );
    }

    // Support Articles collection rules
    match /support_articles/{articleId} {
      // Anyone can read articles
      allow read: if true;
      // Only admins and support staff can create/update/delete articles
      allow write: if isSignedIn() && (isAdmin() || hasRole('support'));
      // Allow authenticated users to update article ratings
      allow update: if isSignedIn() && (
        // Only allow updating the ratings field
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings', 'helpful', 'notHelpful'])
      );
    }

    // Rest of your existing rules...
  }
}